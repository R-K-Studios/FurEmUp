<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCharacterPlaceholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

//movement variables
vsp = 0; //current vertical speed
hsp = 0; //current horizontal speed
maxVsp = 5; //Maximum vertical speed
maxHsp = 8; //Maximum horizontal speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check the direction that the player is from this entity
var angle = point_direction(x,y, oPlayer.x, oPlayer.y);

//find the distance to the player
var distance = point_distance(x, y, oPlayer.x, oPlayer.y);

//if the player is within a range, move towrads them, if not stay still
if(distance &lt; 500 &amp;&amp; distance &gt; 100) {
    //movment towards player
    hsp = maxHsp;
    vsp = maxVsp;
}
else { 
    hsp = 0;
    vsp = 0;
}

///Movement Collision
//checking to see if anything is in the way of moving before going there

//check vertical
if(!place_free(x,y+vsp)){
    while(place_free(x,y+sign(vsp))) {y+=sign(vsp);} //snap to edge of blockage
    vsp=0; //no need to move further
}
//check horizontal
if(!place_free(x+hsp,y)){
    while(place_free(x+sign(hsp),y)) {x+=sign(hsp);} //snap to edge of blockage
    hsp=0; //no need to mover further
}
//apply movement
x += lengthdir_x(hsp, angle);
y += lengthdir_y(vsp, angle);

//flip sprite to match movment
if(lengthdir_x(hsp, angle) &gt; 0) {
    image_xscale = 1;
}
else if (lengthdir_x(hsp, angle) &lt; 0) {
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
